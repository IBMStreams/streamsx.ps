<?xml version="1.0" encoding="UTF-8"?>
<functionModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.ibm.com/xmlns/prod/streams/spl/function" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/function functionModel.xsd">
  <functionSet>
    <headerFileName>ProcessStoreWrappers.h</headerFileName>
    <functions>
      <function>
        <description>Put an item into the store. Returns true if the store did
       not contain an item with the same key, false otherwise.</description>
        <prototype>&lt;any T1, any T2> public stateful boolean psPut(T1 key, T2 item)</prototype>
      </function>
      <function>
        <description>Get an item from the store. Returns true if the store did
       contain an item with the given key and a matching type, false otherwise.</description>
        <prototype>&lt;any T1, any T2> public stateful boolean psGet(T1 key, mutable T2 item)</prototype>
      </function>
      <function>
        <description>Get the type of a value from the store. Returns true if the store did
       contain an item with the given key, false otherwise The typeName
       parameter holds the type of the value associated with the key.</description>
        <prototype>&lt;any T1> public stateful boolean psTypeOf(T1 key, mutable rstring typeName)</prototype>
      </function>
      <function>
        <description>Compare and swap. If 'key' does not exist, insert it with a
        value that is set to 'newValue'. If 'key' exists, compare the current
        value associated with it to 'value'.  If they are the same, then replace
        the current value associated with 'key' with 'newValue' and return
        true. If they are different, copy the current value associated with
        'key' into 'value' and return false. In the latter case, if the types of
        the current value associated with 'key' and that of 'value' do not
        match, then 'value' is left untouched.</description>
        <prototype>&lt;any T1, any T2, any T3> public stateful boolean psCas(T1 key, mutable T2 value, T3 newValue)</prototype>
      </function>
      <function>
        <description>Remove an item from the store. Returns true if the store did
       contain an item with the given key, false otherwise.</description>
        <prototype>&lt;any T1> public stateful boolean psRemove(T1 key)</prototype>
      </function>
      <function>
        <description>Check if an item exists. Returns true if the store does
       contain an item with the given key, false otherwise.</description>
        <prototype>&lt;any T1> public stateful boolean psHas(T1 key)</prototype>
      </function>
      <function>
        <description>Clear the entire store.</description>
        <prototype>public stateful void psClear()</prototype>
      </function>
      <function>
        <description>Get the size of the store.</description>
        <prototype>public stateful uint64 psSize()</prototype>
      </function>
      <function>
        <description>Serialize all the items in the store.</description>
        <prototype cppName="psSerializeAll">public stateful void psSerialize(mutable blob data)</prototype>
      </function>
      <function>
        <description>Serialize the items in the store that have key and value types that match those of the arguments.</description>
        <prototype>&lt;any T1, any T2> public stateful void psSerialize(mutable blob data, T1 dummyKey, T2 dummyValue)</prototype>
      </function>
      <function>
        <description> Serialize the items in the store that have key and value types that match those of the tuple argument. 
        E.g., tuple&lt;tuple&lt;int32 key, rstring value> type1, tuple&lt;list&lt;int32> key, decimal32 value> type2> </description>
        <prototype>&lt;tuple T> public stateful void psSerialize(mutable blob data, T types)</prototype>
      </function>
      <function>
        <description>Deserialize the items from the serialized store of key and value types that match those of the arguments.</description>
        <prototype>&lt;any T1, any T2> public stateful void psDeserialize(blob data, T1 dummyKey, T2 dummyValue)</prototype>
      </function>
      <function>
        <description> Deserialize the items from the serialized store of key and value types that match those of the tuple argument. 
        E.g., tuple&lt;tuple&lt;int32 key, rstring value> type1, tuple&lt;list&lt;int32> key, decimal32 value> type2> </description>
        <prototype>&lt;tuple T> public stateful void psDeserialize(blob data, T types)</prototype>
      </function>
      <function>
        <description>Begin the iteration. No other operations that can modify
        the state can be used until after a matching endIteration()
        call. Returns the iterator.</description>
        <prototype>public stateful uint64 psBeginIteration()</prototype>
      </function>
      <function>
        <description>Get the next key and value of given types. Returns true if an item was
        found, false otherwise.</description>
        <prototype>&lt;any T1, any T2> public stateful boolean psGetNext(uint64 iterator, mutable T1 key, mutable T2 value)</prototype>
      </function>
      <function>
        <description>Get the next key and value as well as their types. The
        values are returned (in out parameters) using their string representations no matter what
        their types are. Returns true if an item was found, false
        otherwise.</description>
        <prototype>public stateful boolean psGetNext(uint64 iterator, mutable rstring key, mutable rstring value, mutable rstring keyType, mutable rstring valueType)</prototype>
      </function>
      <function>
        <description>End the iteration.</description>
        <prototype>public stateful void psEndIteration(uint64 iterator)</prototype>
      </function>
      <function>
        <description>Create a new process store with a given name. Return the
        process store handle.</description>
        <prototype>public stateful uint64 psCreateStore()</prototype>
      </function>
      <function>
        <description>Create a new process store with a given name. Return the
        process store handle. This version of the createStore enables one to
        create unsynchronized stores.</description>
        <prototype>public stateful uint64 psCreateStore(boolean synchronized)</prototype>
      </function>
      <function>
        <description>Create a new process store with a given name. Return the
        process store handle if created, 0 otherwise (a process store with the same name exists).</description>
        <prototype>public stateful uint64 psCreateStore(rstring name)</prototype>
      </function>
      <function>
        <description>Create a new process store with a given name. Return the
        process store handle if created, 0 otherwise (a process store with the
        same name exists). This version of the createStore enables one to create
        unsynchronized stores.</description>
        <prototype>public stateful uint64 psCreateStore(rstring name, boolean synchronized)</prototype>
      </function>
      <function>
        <description>Create a new process store with a given name or get it if
        it already exists. Return the process store handle.</description>
        <prototype>public stateful uint64 psCreateOrGetStore(rstring name)</prototype>
      </function>
      <function>
        <description>Create a new process store with a given name or get it if
        it already exists. Return the process store handle or 0 if the store exists but has non-matching synhronization. This version of the createStore enables one to create
        unsynchronized stores.</description>
        <prototype>public stateful uint64 psCreateOrGetStore(rstring name, boolean synchronized)</prototype>
      </function>
      <function>
        <description>Get all store information. Returns the store names and handles.</description>
        <prototype>public stateful void psGetAllStoreInfo(mutable list&lt;rstring> names, mutable list&lt;uint64> handles)</prototype>
      </function>
      <function>
        <description>Find a process store given its name. Return the process
        store handle if found, 0 otherwise.</description>
        <prototype>public stateful uint64 psFindStore(rstring name)</prototype>
      </function>
      <function>
        <description>Remove a process store given its handle.</description>
        <prototype>public stateful void psRemoveStore(uint64 store)</prototype>
      </function>
      <function>
        <description>Put an item into the given store. Returns true if the store did
       not contain an item with the same key, false otherwise.</description>
        <prototype>&lt;any T1, any T2> public stateful boolean psPut(uint64 store, T1 key, T2 item)</prototype>
      </function>
      <function>
        <description>Get the type of a value from the given store. Returns true
       if the store did contain an item with the given key, false otherwise The
       typeName parameter holds the type of the value associated with the
       key.</description>
        <prototype>&lt;any T1> public stateful boolean psTypeOf(uint64 store, T1 key, mutable rstring typeName)</prototype>
      </function>
      <function>
        <description>Get an item from the given store. Returns true if the store did
       contain an item with the given key and a matching type, false otherwise.</description>
        <prototype>&lt;any T1, any T2> public stateful boolean psGet(uint64 store, T1 key, mutable T2 item)</prototype>
      </function>
      <function>
        <description>Compare and swap in a given store. If 'key' does not exist, insert it with a
        value that is set to 'newValue'. If 'key' exists, compare the current
        value associated with it to 'value'.  If they are the same, then replace
        the current value associated with 'key' with 'newValue' and return
        true. If they are different, copy the current value associated with
        'key' into 'value' and return false. In the latter case, if the types of
        the current value associated with 'key' and that of 'value' do not
        match, then 'value' is left untouched.</description>
        <prototype>&lt;any T1, any T2, any T3> public stateful boolean psCas(uint64 store, T1 key, mutable T2 value, T3 newValue)</prototype>
      </function>
      <function>
        <description>Remove an item from the given store. Returns true if the store did
       contain an item with the given key, false otherwise.</description>
        <prototype>&lt;any T1> public stateful boolean psRemove(uint64 store, T1 key)</prototype>
      </function>
      <function>
        <description>Check if an item exists. Returns true if the given store does
       contain an item with the given key, false otherwise.</description>
        <prototype>&lt;any T1> public stateful boolean psHas(uint64 store, T1 key)</prototype>
      </function>
      <function>
        <description>Clear the given store.</description>
        <prototype>public stateful void psClear(uint64 store)</prototype>
      </function>
      <function>
        <description>Get the size of the given store.</description>
        <prototype>public stateful uint64 psSize(uint64 store)</prototype>
      </function>
      <function>
        <description>Serialize all the items in the given store.</description>
        <prototype cppName="psSerializeAll">public stateful void psSerialize(uint64 store, mutable blob data)</prototype>
      </function>
      <function>
        <description>Serialize the items in the given store that have key and value types that match those of the arguments.</description>
        <prototype>&lt;any T1, any T2> public stateful void psSerialize(uint64 store, mutable blob data, T1 dummyKey, T2 dummyValue)</prototype>
      </function>
      <function>
        <description> Serialize the items in the given store that have key and value types that match those of the tuple argument. 
        E.g., tuple&lt;tuple&lt;int32 key, rstring value> type1, tuple&lt;list&lt;int32> key, decimal32 value> type2> </description>
        <prototype>&lt;tuple T> public stateful void psSerialize(uint64 store, mutable blob data, T types)</prototype>
      </function>
      <function>
        <description>Deserialize the items from the serialized store of key and value types that match those of the arguments.</description>
        <prototype>&lt;any T1, any T2> public stateful void psDeserialize(uint64 store, blob data, T1 dummyKey, T2 dummyValue)</prototype>
      </function>
      <function>
        <description> Deserialize the items from the serialized store of key and value types that match those of the tuple argument. 
        E.g., tuple&lt;tuple&lt;int32 key, rstring value> type1, tuple&lt;list&lt;int32> key, decimal32 value> type2> </description>
        <prototype>&lt;tuple T> public stateful void psDeserialize(uint64 store, blob data, T types)</prototype>
      </function>
      <function>
        <description>Begin the iteration on a given store. No other operations that can modify
        the state can be used until after a matching psEndIteration()
        call. Returns the iterator.</description>
        <prototype>public stateful uint64 psBeginIteration(uint64 store)</prototype>
      </function>
      <function>
        <description>Get the next key and value of given types in the given store. Returns true if an item was
        found, false otherwise.</description>
        <prototype>&lt;any T1, any T2> public stateful boolean psGetNext(uint64 store, uint64 iterator, mutable T1 key, mutable T2 value)</prototype>
      </function>
      <function>
        <description>Get the next key and value as well as their types in the
       given store. The values are returned (in out parameters) using their
       string representations no matter what their types are. Returns true if an
       item was found, false otherwise.</description>
        <prototype>public stateful boolean psGetNext(uint64 store, uint64 iterator, mutable rstring key, mutable rstring value, mutable rstring keyType, mutable rstring valueType)</prototype>
      </function>
      <function>
        <description>End the iteration on the given store.</description>
        <prototype>public stateful void psEndIteration(uint64 store, uint64 iterator)</prototype>
      </function>
    </functions>
    <dependencies>
      <library>
        <cmn:description>Process store library</cmn:description>
        <cmn:managedLibrary>
          <cmn:lib>ProcessStoreLib</cmn:lib>
          <cmn:command>../../../../impl/bin/archLevel</cmn:command>
        </cmn:managedLibrary>
      </library>
    </dependencies>
  </functionSet>
</functionModel>